name: Download the jar Arfifacts & Deploy to Azure Spring Cloud with Key Vault

on:
  workflow_dispatch:

###################################################################################################################
#
# https://github.com/marketplace/actions/azure-spring-cloud
# https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect
# https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
#
###################################################################################################################

env:
  AZ_CLI_VERSION: 2.37.0
  SPRING_CLOUD_SERVICE: asa-petcliasa # customize this
  KEYVAULT: kv-petcliasa42 # customize this
  
  # ==== APPS ====:
  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service

  # useless as config & discovery server are managed by Azure Spring Cloud
  CONFIG_SERVER: config-server
  DISCOVERY_SERVER: discovery-server

  PRJ_PREFIX: spring-petclinic

  # ==== Azure Spring Cloud Apps Deployment params ====:

  # https://docs.spring.io/spring-boot/docs/2.6.6/reference/html/howto.html#howto.properties-and-configuration.set-active-spring-profiles
  # https://docs.spring.io/spring-boot/docs/2.6.6/reference/html/features.html#features.profiles
  # customize this
  DEPLOYMENT_JVM_OPTIONS: -Dazure.keyvault.uri=https://kv-petcliasa42.vault.azure.net -Xms512m -Xmx1024m  -Dspring.profiles.active=mysql,docker,cloud # --spring.profiles.active=mysql,key-vault,cloud
  AZURE_KEYVAULT_ENDPOINT: https://kv-petcliasa42.vault.azure.net

  DEPLOYMENT_VERSION: 2.6.6
  DEPLOYMENT_RUNTIME_VERSION: Java_11
  DEPLOYMENT_CPU: 500m
  DEPLOYMENT_MEMORY: 512Mi
  DEPLOYMENT_INSTANCE_COUNT: 3
  DEPLOYMENT_DISABLE_PROBE: false

  # If set to true and the deployment specified by deployment-name does not exist at execution time, it will be created.
  DEPLOYMENT_CREATE_NEW: true

  # https://github.com/marketplace/actions/azure-spring-cloud#arguments
  # Choose either the Blue or Green settings below
  # /!\ Deployment name can contain only lowercase letters, numbers and hyphens.
  DEPLOYMENT_NAME: blue
  DEPLOYMENT_STAGING: true
  DEPLOYMENT_ACTION: deploy

  # Choose either Blue or Green
  # DEPLOYMENT_NAME: green
  # DEPLOYMENT_STAGING: false
  # DEPLOYMENT_ACTION: set-production

jobs:
  deploy:
    runs-on: ubuntu-latest
    # environment: production // https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
    # https://github.com/marketplace/actions/azure-login
    steps:
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
    # /!\ IMPORTANT:  The step that creates or updates the environment variable does not have access to the new value, but all subsequent steps in a job will have access.
    - name: Set Base environment variables
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV
        
        echo "API_GATEWAY_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "ADMIN_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CONFIG_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VISITS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV

        echo "API_GATEWAY_DEPLOYMENT=${{ env.DEPLOYMENT_NAME }}-${{ env.API_GATEWAY }}" >> $GITHUB_ENV
        echo "ADMIN_SERVER_DEPLOYMENT=${{ env.DEPLOYMENT_NAME }}-${{ env.ADMIN_SERVER }}" >> $GITHUB_ENV
        echo "CONFIG_SERVER_DEPLOYMENT=${{ env.DEPLOYMENT_NAME }}-${{ env.CONFIG_SERVER }}" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_DEPLOYMENT=${{ env.DEPLOYMENT_NAME }}-${{ env.CUSTOMERS_SERVICE }}" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_DEPLOYMENT=${{ env.DEPLOYMENT_NAME }}-${{ env.DISCOVERY_SERVER }}" >> $GITHUB_ENV
        echo "VETS_SERVICE_DEPLOYMENT=${{ env.DEPLOYMENT_NAME }}-${{ env.VETS_SERVICE }}" >> $GITHUB_ENV
        echo "VISITS_SERVICE_DEPLOYMENT=${{ env.DEPLOYMENT_NAME }}-${{ env.VISITS_SERVICE }}" >> $GITHUB_ENV

        echo "GH_API=api.github.com/user/packages/maven" >> $GITHUB_ENV
        
        echo "ADMIN_SERVER_GROUP_ID=org.springframework.samples.petclinic.admin" >> $GITHUB_ENV
        echo "ADMIN_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}" >> $GITHUB_ENV

        echo "API_GATEWAY_GROUP_ID=org.springframework.samples.petclinic.api" >> $GITHUB_ENV
        echo "API_GATEWAY_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}" >> $GITHUB_ENV

        echo "CONFIG_SERVER_GROUP_ID=org.springframework.samples.petclinic.config" >> $GITHUB_ENV
        echo "CONFIG_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}" >> $GITHUB_ENV

        echo "CUSTOMERS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.client" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}" >> $GITHUB_ENV

        echo "DISCOVERY_SERVER_GROUP_ID=org.springframework.samples.petclinic.discovery" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}" >> $GITHUB_ENV

        echo "VETS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.vets" >> $GITHUB_ENV
        echo "VETS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}" >> $GITHUB_ENV

        echo "VISITS_SERVICE_GROUP_ID=org.springframework.samples.petclinic.visits" >> $GITHUB_ENV
        echo "VISITS_SERVICE_ARTIFACT_ID=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}" >> $GITHUB_ENV

        echo "GH_WORKSPACE=${{ github.workspace }}" >> $GITHUB_ENV # "/github/workspace"
      shell: bash

    # Variables in the env map cannot be defined in terms of other variables in the map
    - name: Set dependent environment variables
      run: |
        # ==== JARS ====: PWD already in /home/runner/work/azure-spring-cloud-petclinic-mic-srv >> $GITHUB_ENV
        echo "API_GATEWAY_JAR=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}/target/$API_GATEWAY_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "ADMIN_SERVER_JAR=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}/target/$ADMIN_SERVER_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "CONFIG_SERVER_JAR=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}/target/$CONFIG_SERVER_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_JAR=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}/target/$CUSTOMERS_SERVICE_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_JAR=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}/target/$DISCOVERY_SERVER_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}/target/$VETS_SERVICE_JAR_ARTIFACT" >> $GITHUB_ENV
        echo "VISITS_SERVICE_JAR=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}/target/$VISITS_SERVICE_JAR_ARTIFACT" >> $GITHUB_ENV

        echo "API_GATEWAY_PACKAGE_PATH=$GH_WORKSPACE/${{ env.API_GATEWAY }}/${{ env.API_GATEWAY_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "ADMIN_SERVER_PACKAGE_PATH=$GH_WORKSPACE/${{ env.ADMIN_SERVER }}/${{ env.ADMIN_SERVER_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "CONFIG_SERVER_PACKAGE_PATH=$GH_WORKSPACE/${{ env.CONFIG_SERVER }}/${{ env.CONFIG_SERVER_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_PACKAGE_PATH=$GH_WORKSPACE/${{ env.CUSTOMERS_SERVICE }}/${{ env.CUSTOMERS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_PACKAGE_PATH=$GH_WORKSPACE/${{ env.DISCOVERY_SERVER }}/${{ env.DISCOVERY_SERVER_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "VETS_SERVICE_PACKAGE_PATH=$GH_WORKSPACE/${{ env.VETS_SERVICE }}/${{ env.VETS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "VISITS_SERVICE_PACKAGE_PATH=$GH_WORKSPACE/${{ env.VISITS_SERVICE }}/${{ env.VISITS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_ENV

        echo "ADMIN_SERVER_API_URL=https://$GH_API/$ADMIN_SERVER_GROUP_ID.$ADMIN_SERVER_ARTIFACT_ID/versions" >> $GITHUB_ENV
        echo "API_GATEWAY_API_URL=https://$GH_API/$API_GATEWAY_GROUP_ID.$API_GATEWAY_ARTIFACT_ID/versions" >> $GITHUB_ENV
        echo "CONFIG_SERVER_API_URL=https://$GH_API/$CONFIG_SERVER_GROUP_ID.$CONFIG_SERVER_ARTIFACT_ID/versions" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_API_URL=https://$GH_API/$CUSTOMERS_SERVICE_GROUP_ID.$CUSTOMERS_SERVICE_ARTIFACT_ID/versions" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_API_URL=https://$GH_API/$DISCOVERY_SERVER_GROUP_ID.$DISCOVERY_SERVER_ARTIFACT_ID/versions" >> $GITHUB_ENV
        echo "VETS_SERVICE_API_URL=https://$GH_API/$VETS_SERVICE_GROUP_ID.$VETS_SERVICE_ARTIFACT_ID/versions" >> $GITHUB_ENV
        echo "VISITS_SERVICE_API_URL=https://$GH_API/$VISITS_SERVICE_GROUP_ID.$VISITS_SERVICE_ARTIFACT_ID/versions" >> $GITHUB_ENV
      shell: bash

    - name: Display environment variables
      run: |
        echo "Checking GITHUB_ENV"

        echo "AZURE_KEYVAULT_ENDPOINT=${{ env.AZURE_KEYVAULT_ENDPOINT }}"
        echo "LOCAL_IP=$LOCAL_IP"

        echo "API_GATEWAY_JAR_ARTIFACT=$API_GATEWAY_JAR_ARTIFACT"
        echo "ADMIN_SERVER_JAR_ARTIFACT=$ADMIN_SERVER_JAR_ARTIFACT"
        echo "CONFIG_SERVER_JAR_ARTIFACT=$CONFIG_SERVER_JAR_ARTIFACT"
        echo "DISCOVERY_SERVER_JAR_ARTIFACT=$DISCOVERY_SERVER_JAR_ARTIFACT"
        echo "CUSTOMERS_SERVICE_JAR_ARTIFACT=$CUSTOMERS_SERVICE_JAR_ARTIFACT"
        echo "VETS_SERVICE_JAR_ARTIFACT=$VETS_SERVICE_JAR_ARTIFACT"
        echo "VISITS_SERVICE_JAR_ARTIFACT=$VISITS_SERVICE_JAR_ARTIFACT"

        echo "API_GATEWAY_JAR=$API_GATEWAY_JAR"
        echo "ADMIN_SERVER_JAR=$ADMIN_SERVER_JAR"
        echo "CONFIG_SERVER_JAR=$CONFIG_SERVER_JAR"
        echo "CUSTOMERS_SERVICE_JAR=$CUSTOMERS_SERVICE_JAR"
        echo "DISCOVERY_SERVER_JAR=$DISCOVERY_SERVER_JAR"
        echo "VETS_SERVICE_JAR=$VETS_SERVICE_JAR"
        echo "VISITS_SERVICE_JAR=$VISITS_SERVICE_JAR"

        echo "GH_WORKSPACE=$GH_WORKSPACE"
        echo "API_GATEWAY_PACKAGE_PATH=$API_GATEWAY_PACKAGE_PATH"
        echo "ADMIN_SERVER_PACKAGE_PATH=$ADMIN_SERVER_PACKAGE_PATH"
        echo "CONFIG_SERVER_PACKAGE_PATH=$CONFIG_SERVER_PACKAGE_PATH"
        echo "CUSTOMERS_SERVICE_PACKAGE_PATH=$CUSTOMERS_SERVICE_PACKAGE_PATH"
        echo "DISCOVERY_SERVER_PACKAGE_PATH=$DISCOVERY_SERVER_PACKAGE_PATH"
        echo "VETS_SERVICE_PACKAGE_PATH=$VETS_SERVICE_PACKAGE_PATH"
        echo "VISITS_SERVICE_PACKAGE_PATH=$VISITS_SERVICE_PACKAGE_PATH"

        echo "API_GATEWAY_DEPLOYMENT=$API_GATEWAY_DEPLOYMENT"
        echo "ADMIN_SERVER_DEPLOYMENT=$ADMIN_SERVER_DEPLOYMENT"
        echo "CONFIG_SERVER_DEPLOYMENT=$CONFIG_SERVER_DEPLOYMENT"
        echo "CUSTOMERS_SERVICE_DEPLOYMENT=$CUSTOMERS_SERVICE_DEPLOYMENT"
        echo "DISCOVERY_SERVER_DEPLOYMENT=$DISCOVERY_SERVER_DEPLOYMENT"
        echo "VETS_SERVICE_DEPLOYMENT=$VETS_SERVICE_DEPLOYMENT"
        echo "VISITS_SERVICE_DEPLOYMENT=$VISITS_SERVICE_DEPLOYMENT"

        echo "GH_API=$GH_API"
        echo "ADMIN_SERVER_API_URL=$ADMIN_SERVER_API_URL"
        echo "API_GATEWAY_API_URL=$API_GATEWAY_API_URL"
        echo "CONFIG_SERVER_API_URL=$CONFIG_SERVER_API_URL"
        echo "CUSTOMERS_SERVICE_API_URL=$CUSTOMERS_SERVICE_API_URL"
        echo "DISCOVERY_SERVER_API_URL=$DISCOVERY_SERVER_API_URL"
        echo "VETS_SERVICE_API_URL=$VETS_SERVICE_API_URL"
        echo "VISITS_SERVICE_API_URL=$VISITS_SERVICE_API_URL"

        echo "ADMIN_SERVER_GROUP_ID=$ADMIN_SERVER_GROUP_ID"
        echo "ADMIN_SERVER_ARTIFACT_ID=$ADMIN_SERVER_ARTIFACT_ID"
        echo "API_GATEWAY_GROUP_ID=$API_GATEWAY_GROUP_ID"
        echo "API_GATEWAY_ARTIFACT_ID=$API_GATEWAY_ARTIFACT_ID"
        echo "CONFIG_SERVER_GROUP_ID=$CONFIG_SERVER_GROUP_ID"
        echo "CONFIG_SERVER_ARTIFACT_ID=$CONFIG_SERVER_ARTIFACT_ID"
        echo "CUSTOMERS_SERVICE_GROUP_ID=$CUSTOMERS_SERVICE_GROUP_ID"
        echo "CUSTOMERS_SERVICE_ARTIFACT_ID=$CUSTOMERS_SERVICE_GROUP_ID"
        echo "DISCOVERY_SERVER_GROUP_ID=$DISCOVERY_SERVER_GROUP_ID"
        echo "DISCOVERY_SERVER_ARTIFACT_ID=$DISCOVERY_SERVER_ARTIFACT_ID"
        echo "VETS_SERVICE_GROUP_ID=$VETS_SERVICE_GROUP_ID"
        echo "VETS_SERVICE_ARTIFACT_ID=$VETS_SERVICE_ARTIFACT_ID"
        echo "VISITS_SERVICE_GROUP_ID=$VISITS_SERVICE_GROUP_ID"
        echo "VISITS_SERVICE_ARTIFACT_ID=$VISITS_SERVICE_ARTIFACT_ID"

      shell: bash

    # You can  download all artifacts in a workflow run by not specifying a name.
    - name: Download ALL Jar artifacts
      uses: actions/download-artifact@v3

    # As the Deploy Job runs now in a different Workflow than the Build Job, the data workspace is not shared anymore
    # You need to download the Artifacts from the GH Packages
    # https://docs.github.com/en/rest/reference/packages#get-a-package-for-an-organization
    # generate a PAT : https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
    # /!\ IMPORTANT: If package_type is not container, your token must also include the repo scope.
    # https://gist.github.com/maxim/6e15aa45ba010ab030c4
    # local test with: curl -u username:<Your PAT Token> -H "Accept: application/vnd.github.v3+json" https://api.github.com
    # curl -u username:<Your PAT Token> -H "Accept: application/vnd.github.v3+json" https://api.github.com/user/packages/maven/org.springframework.samples.petclinic.admin.spring-petclinic-admin-server/versions
    # curl -u username:<Your PAT Token> -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/ezYakaEagle442/azure-spring-cloud-petclinic-mic-srv/releases

    TODO: replace the curl workaround with https://gist.github.com/tgrall/25f82f69bfdbc630bfc7a2e4c3acd39d 

    gh api graphql -f query='
    {
        repository(owner: "tgrall-octodemo", name: "azure-spring-cloud-petclinic-mic-srv") {
          packages(first: 10, packageType: MAVEN, names: "org.springframework.samples.petclinic.client.spring-petclinic-customers-service") {
            edges {
              node {
                id
                name
                packageType
                versions(first: 100) {
                  nodes {
                    id
                    version
                    files(first: 10) {
                      nodes {
                        name
                        url
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      '

    # https://github.com/octokit/graphql-action
    - name: Get Admin-Server GH Package URL
      uses: octokit/graphql-action@v2.x
      id: get_latest_release
      with:
        query: |
          query release($owner:String!,$repo:String!) {
            repository(owner:$owner,name:$repo) {
              releases(first:1) {
                nodes {
                  name
                  createdAt
                  tagName
                  description
                }
              }
            }
          }
        owner: ${{ github.event.repository.owner.name }}
        repo: ${{ github.event.repository.name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: "echo 'latest release: ${{ steps.get_latest_release.outputs.data }}'"

    - name: Download Admin-Server GH Package
      run: |
        PKG_VER_ID=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.ADMIN_SERVER_API_URL }} | jq .[0].id)
        PKG_HTML_URL=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.ADMIN_SERVER_API_URL }}/$PKG_VER_ID | jq -r .html_url)

        pwd
        mkdir $GH_WORKSPACE/${{ env.ADMIN_SERVER }}
        ls -al
        ls -al ${{ github.workspace }}

        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            # Content-Type: application/octet-stream not application/java-archive (or application/x-java-archive | application/x-jar)
            wget $line -O ${{ env.ADMIN_SERVER_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            # Quick & dirty, the first item is the jar file
            break ;
        done
        
        ls -al $GH_WORKSPACE/${{ env.ADMIN_SERVER }}

      shell: bash
      env:
        GHA_PAT: ${{ secrets.GHA_PAT }}

    - name: Download Config-Server GH Package
      run: |
        PKG_VER_ID=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.CONFIG_SERVER_API_URL }} | jq .[0].id)
        PKG_HTML_URL=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.CONFIG_SERVER_API_URL }}/$PKG_VER_ID | jq -r .html_url)
        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        mkdir $GH_WORKSPACE/${{ env.CONFIG_SERVER }}

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            wget $line -O ${{ env.CONFIG_SERVER_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            break ;
        done        
        ls -al $GH_WORKSPACE/${{ env.CONFIG_SERVER }}
      shell: bash
      env:
        GHA_PAT: ${{ secrets.GHA_PAT }}

    - name: Download Discovery-Server GH Package
      run: |
        PKG_VER_ID=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.DISCOVERY_SERVER_API_URL }} | jq .[0].id)
        PKG_HTML_URL=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.DISCOVERY_SERVER_API_URL }}/$PKG_VER_ID | jq -r .html_url)
        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        mkdir $GH_WORKSPACE/${{ env.DISCOVERY_SERVER }}

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            wget $line -O ${{ env.DISCOVERY_SERVER_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            break ;
        done        

        ls -al $GH_WORKSPACE/${{ env.DISCOVERY_SERVER }}        
      shell: bash
      env:
        GHA_PAT: ${{ secrets.GHA_PAT }}


    - name: Download API-Gateway GH Package
      run: |
        PKG_VER_ID=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.API_GATEWAY_API_URL }} | jq .[0].id)
        PKG_HTML_URL=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.API_GATEWAY_API_URL }}/$PKG_VER_ID | jq -r .html_url)
        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        mkdir $GH_WORKSPACE/${{ env.API_GATEWAY }}

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            wget $line -O ${{ env.API_GATEWAY_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            break ;
        done        

        ls -al $GH_WORKSPACE/${{ env.API_GATEWAY }}        
      shell: bash
      env:
        GHA_PAT: ${{ secrets.GHA_PAT }}

    - name: Download Customers-Service GH Package
      run: |
        PKG_VER_ID=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.CUSTOMERS_SERVICE_API_URL }} | jq .[0].id)
        PKG_HTML_URL=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.CUSTOMERS_SERVICE_API_URL }}/$PKG_VER_ID | jq -r .html_url)
        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        mkdir $GH_WORKSPACE/${{ env.CUSTOMERS_SERVICE }}

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            wget $line -O ${{ env.CUSTOMERS_SERVICE_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            break ;
        done        

        ls -al $GH_WORKSPACE/${{ env.CUSTOMERS_SERVICE }}        
      shell: bash
      env:
        GHA_PAT: ${{ secrets.GHA_PAT }}

    - name: Download Vets-Service GH Package
      run: |
        PKG_VER_ID=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.VETS_SERVICE_API_URL }} | jq .[0].id)
        PKG_HTML_URL=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.VETS_SERVICE_API_URL }}/$PKG_VER_ID | jq -r .html_url)
        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        mkdir $GH_WORKSPACE/${{ env.VETS_SERVICE  }}

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            wget $line -O ${{ env.VETS_SERVICE_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            break ;
        done        

        ls -al $GH_WORKSPACE/${{ env.VETS_SERVICE }}        
      shell: bash
      env:
        GHA_PAT: ${{ secrets.GHA_PAT }}

    - name: Download Visits-Service GH Package
      run: |
        PKG_VER_ID=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.VISITS_SERVICE_API_URL }} | jq .[0].id)
        PKG_HTML_URL=$(curl -u username:${{ env.GHA_PAT }} -H "Accept: application/vnd.github.v3+json" ${{ env.VISITS_SERVICE_API_URL }}/$PKG_VER_ID | jq -r .html_url)
        curl -u username:${{ env.GHA_PAT }} $PKG_HTML_URL | grep "https://github-registry-files.githubusercontent.com" > PKG_HTML_FILE.txt

        mkdir $GH_WORKSPACE/${{ env.VISITS_SERVICE }}

        sed -i 's/                <a href=\"//g' PKG_HTML_FILE.txt
        sed -i 's/\" class=\"d-flex\">//g' PKG_HTML_FILE.txt
        sed -i 's/\&amp\;/\&/g' PKG_HTML_FILE.txt

        PKG_URL_LOCAL_PATH="pkg_url.txt"
        cat PKG_HTML_FILE.txt |
        while IFS= read -r line
        do
            echo "line ... |$line|"
            echo "$line" > $PKG_URL_LOCAL_PATH
            wget $line -O ${{ env.VISITS_SERVICE_PACKAGE_PATH }} --header="Authorization: Bearer ${{ env.GHA_PAT }}" --quiet
            break ;
        done        

        ls -al $GH_WORKSPACE/${{ env.VISITS_SERVICE }}        
      shell: bash
      env:
        GHA_PAT: ${{ secrets.GHA_PAT }}

    - name: Login with Key Vault SP
      uses: azure/login@v1 
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # When Public access is disabled on KV, you need to add a network rule in the KV Firewall
    - name: Authorize local IP to access the Azure Key Vault
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ env.AZ_CLI_VERSION }}
        inlineScript: |
          az keyvault network-rule add --ip-address $LOCAL_IP --name ${{ env.KEYVAULT }} --only-show-errors
          sleep 30

    - name: Get service SP from Key Vault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEYVAULT }}
        secrets: "AZURE-CREDENTIALS-FOR-SPRING"
      id: keyvaultaction
    
    - name: Get MySQL Secrets from Key Vault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ env.KEYVAULT }}
        secrets: "MYSQL-SERVER-FULL-NAME,MYSQL-DATABASE-NAME,MYSQL-SERVER-ADMIN-LOGIN-NAME,MYSQL-SERVER-ADMIN-PASSWORD"
      id: mysqlsecrets
      
    - name: Login with Service SP
      uses: azure/login@v1
      with:
        creds: ${{ steps.keyvaultaction.outputs.AZURE-CREDENTIALS-FOR-SPRING }}

    - name: Deploy vets-service
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ secrets.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.VETS_SERVICE }}
        use-staging-deployment: ${{ env.DEPLOYMENT_STAGING }}
        package: ${{ env.VETS_SERVICE_PACKAGE_PATH }}
        jvm-options: ${{ env.DEPLOYMENT_JVM_OPTIONS }}
        # Environment variables to be entered using the syntax '-key value'. Values containing spaces should be enclosed in double quotes.
        environment-variables: -AZURE_TENANT_ID ${{ secrets.CFG_SRV_SPN_TNT }} -AZURE_CLIENT_ID ${{ secrets.CFG_SRV_SPN_ID }} -AZURE_CLIENT_SECRET ${{ secrets.CFG_SRV_SPN_PWD }} -AZURE_KEYVAULT_ENDPOINT ${{ env.AZURE_KEYVAULT_ENDPOINT }} -MYSQL_SERVER_FULL_NAME "${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-FULL-NAME }}" -MYSQL_DATABASE_NAME "${{ steps.mysqlsecrets.outputs.MYSQL-DATABASE-NAME }}" -MYSQL_SERVER_ADMIN_LOGIN_NAME "${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-LOGIN-NAME }}" -MYSQL_SERVER_ADMIN_PASSWORD "${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-PASSWORD }}" 
        deployment-name:  ${{ env.VETS_SERVICE_DEPLOYMENT }}
        create-new-deployment: ${{ env.DEPLOYMENT_CREATE_NEW }}
        version: ${{ env.DEPLOYMENT_VERSION }} 
        runtime-version: ${{ env.DEPLOYMENT_RUNTIME_VERSION }}

    - name: Deploy visits-service
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ secrets.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.VISITS_SERVICE }}
        use-staging-deployment: ${{ env.DEPLOYMENT_STAGING }}
        package: ${{ env.VISITS_SERVICE_PACKAGE_PATH }}
        jvm-options: ${{ env.DEPLOYMENT_JVM_OPTIONS }}
        # Environment variables to be entered using the syntax '-key value'. Values containing spaces should be enclosed in double quotes.
        environment-variables: "-MYSQL_SERVER_FULL_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-FULL-NAME }} -MYSQL_DATABASE_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-DATABASE-NAME }} -MYSQL_SERVER_ADMIN_LOGIN_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-LOGIN-NAME }} -MYSQL_SERVER_ADMIN_PASSWORD ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-PASSWORD }}"
        deployment-name:  ${{ env.VISITS_SERVICE_DEPLOYMENT }}
        create-new-deployment: ${{ env.DEPLOYMENT_CREATE_NEW }}
        version: ${{ env.DEPLOYMENT_VERSION }} 
        runtime-version: ${{ env.DEPLOYMENT_RUNTIME_VERSION }}

    - name: Deploy customers-service
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ secrets.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.CUSTOMERS_SERVICE }}
        use-staging-deployment: ${{ env.DEPLOYMENT_STAGING }}
        package: ${{ env.CUSTOMERS_SERVICE_PACKAGE_PATH }}
        jvm-options: ${{ env.DEPLOYMENT_JVM_OPTIONS }}
        # Environment variables to be entered using the syntax '-key value'. Values containing spaces should be enclosed in double quotes.
        environment-variables: "-MYSQL_SERVER_FULL_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-FULL-NAME }} -MYSQL_DATABASE_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-DATABASE-NAME }} -MYSQL_SERVER_ADMIN_LOGIN_NAME ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-LOGIN-NAME }} -MYSQL_SERVER_ADMIN_PASSWORD ${{ steps.mysqlsecrets.outputs.MYSQL-SERVER-ADMIN-PASSWORD }}"
        deployment-name:  ${{ env.CUSTOMERS_SERVICE_DEPLOYMENT }}
        create-new-deployment: ${{ env.DEPLOYMENT_CREATE_NEW }}
        version: ${{ env.DEPLOYMENT_VERSION }} 
        runtime-version: ${{ env.DEPLOYMENT_RUNTIME_VERSION }}

    - name: Deploy api-gateway
      uses: Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ secrets.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.API_GATEWAY }}
        use-staging-deployment: ${{ env.DEPLOYMENT_STAGING }}
        package: ${{ env.API_GATEWAY_PACKAGE_PATH }}
        jvm-options: ${{ env.DEPLOYMENT_JVM_OPTIONS }}
        deployment-name:  ${{ env.API_GATEWAY_DEPLOYMENT }}
        create-new-deployment: ${{ env.DEPLOYMENT_CREATE_NEW }}
        version: ${{ env.DEPLOYMENT_VERSION }} 
        runtime-version: ${{ env.DEPLOYMENT_RUNTIME_VERSION }} 

    - name: Deploy admin-server
      uses:  Azure/spring-cloud-deploy@v1
      with:
        azure-subscription: ${{ secrets.AZURE_SUBSCRIPTION }}
        action: deploy
        service-name: ${{ env.SPRING_CLOUD_SERVICE }}
        app-name: ${{ env.ADMIN_SERVER }}
        use-staging-deployment: ${{ env.DEPLOYMENT_STAGING }}
        package: ${{ env.ADMIN_SERVER_PACKAGE_PATH }}
        jvm-options: ${{ env.DEPLOYMENT_JVM_OPTIONS }}   
        deployment-name:  ${{ env.ADMIN_SERVER_DEPLOYMENT }}
        create-new-deployment: ${{ env.DEPLOYMENT_CREATE_NEW }}
        version: ${{ env.DEPLOYMENT_VERSION }} 
        runtime-version: ${{ env.DEPLOYMENT_RUNTIME_VERSION }}
        
    - name: Disable local IP access to the Key Vault
      uses: azure/CLI@v1
      if: ${{ always() }}
      with:
        azcliversion: ${{ env.AZ_CLI_VERSION }}
        inlineScript: |
          az keyvault network-rule remove --ip-address $LOCAL_IP --name ${{ env.KEYVAULT }} --only-show-errors

    # security hardening for self-hosted agents: https://github.com/marketplace/actions/azure-login
    # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners
    # if the runner is self-hosted which is not github provided it is recommended to manually logout at the end of the workflow as shown below.
    - name: Azure Logout security hardening
      uses: azure/CLI@v1
      with:
        azcliversion: ${{ env.AZ_CLI_VERSION }}
        inlineScript: |
          az logout
          az cache purge
          az account clear