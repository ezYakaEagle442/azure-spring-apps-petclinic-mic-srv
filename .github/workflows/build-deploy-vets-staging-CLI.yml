name: Build & Deploy Vets-Service to ASA STAGING Deployments with CLI

###################################################################################################################
#
# https://learn.microsoft.com/en-us/azure/spring-apps/how-to-github-actions?pivots=programming-language-java
# https://github.com/marketplace/actions/azure-spring-apps
# https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect
# https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
#
###################################################################################################################

env:
  AZ_CLI_VERSION: 2.40.0
  AZURE_SPRING_APPS_SERVICE: asa-petcliasa # customize this
  KEYVAULT: kv-petcliasa21 # customize this
  RG_APP: rg-iac-asa-petclinic-mic-srv # RG where to deploy the other Azure services: ASA, MySQL, etc.

  # ==== Azure storage to store Artifacts , values must be consistent with he ones in storage.bicep ====:
  AZ_STORAGE_NAME : stasapetcliasa # customize this
  AZ_BLOB_CONTAINER_NAME: petcliasa-blob # customize this
  # AZ_BLOB_SVC_NAME: default # MUST NOT BE MODIFIED
  # https://stasapetcliasa.blob.core.windows.net/petcliasa-blob/asa-spring-petclinic-admin-server-2.6.6.jar

  # https://learn.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations
  AZ_BLOB_MAX_CONNECTIONS: 5
  AZ_BLOB_MAXSIZE_CONDITION: 104857600
  AZ_BLOB_TIMEOUT: 600

  # ==== APPS ====:
  VETS_SERVICE: vets-service
  PRJ_PREFIX: asa-spring-petclinic

  # ==== Identities ====:
  VETS_SVC_APP_ID_NAME: id-asa-petclinic-vets-service-dev-westeurope-101 # customize this

  # ==== Azure Spring Apps / Apps Deployment params ====:

  # customize this
  # DEPLOYMENT_RG: rg-iac-asa-petclinic-mic-srv 
  # https://microsoft.github.io/spring-cloud-azure/current/reference/html/appendix.html#azure_key_vault_secrets_proeprties
  # spring.cloud.azure.keyvault.secret.enabled MUST BE true
  # spring.cloud.azure.keyvault.secret.endpoint
  # SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT / https://microsoft.github.io/spring-cloud-azure/current/reference/html/index.html#all-configurable-properties
  # -Dspring.cloud.azure.keyvault.secret.property-sources[0].endpoint=https://kv-petcliasa21.vault.azure.net 
  DEPLOYMENT_JVM_OPTIONS: -Dspring.cloud.azure.keyvault.secret.endpoint=https://kv-petcliasa21.vault.azure.net -Dspring.cloud.azure.keyvault.secret.property-sources[0].endpoint=https://kv-petcliasa21.vault.azure.net -Dspring.cloud.azure.keyvault.secret.property-sources[1].endpoint=https://kv-petcliasa21.vault.azure.net -Dspring.cloud.azure.keyvault.secret.property-sources[2].endpoint=https://kv-petcliasa21.vault.azure.net -Xms512m -Xmx1024m -Dspring.profiles.active=mysql,key-vault,cloud
  
  DEPLOYMENT_VERSION: 2.6.6
  DEPLOYMENT_RUNTIME_VERSION: Java_11
  DEPLOYMENT_CPU: 500m
  DEPLOYMENT_MEMORY: 512Mi
  DEPLOYMENT_INSTANCE_COUNT: 1
  
  DEPLOYMENT_DISABLE_PROBE: false
  DEPLOYMENT_ENABLE_STARTUP_PROBE: true
  DEPLOYMENT_ENABLE_LIVENESS_PROBE: true
  DEPLOYMENT_ENABLE_READINESS_PROBE: true

  GRACE_PERIOD: 30

  DEPLOYMENT_STARTUP_PROBE_CFG: src/main/resources/startupProbe.json
  DEPLOYMENT_LIVENESS_PROBE_CFG: src/main/resources/livenessProbe.json
  DEPLOYMENT_READINESS_PROBE_CFG: src/main/resources/readinessProbe.json


  # If set to true and the deployment specified by deployment-name does not exist at execution time, it will be created.
  DEPLOYMENT_CREATE_NEW: true

  # https://github.com/marketplace/actions/azure-spring-cloud#arguments
  # Choose either the Blue or Green settings below
  STAGING_DEPLOYMENT_NAME: blue # Deployment name can contain only lowercase letters, numbers and hyphens
  DEPLOYMENT_STAGING: true
  DEPLOYMENT_ACTION: deploy

  # Choose either Blue or Green
  PRODUCTION_DEPLOYMENT_NAME: green
  # DEPLOYMENT_STAGING: false
  # DEPLOYMENT_ACTION: set-production

  # ==== Secrets ====
  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT: ${{ secrets.SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT }}
  SPRING_CLOUD_AZURE_TENANT_ID: ${{ secrets.SPRING_CLOUD_AZURE_TENANT_ID }}


on: # [push]
  workflow_dispatch:
    
jobs:
  build:
    outputs:
      VETS_SERVICE_JAR_ARTIFACT: ${{ steps.set-var.outputs.VETS_SERVICE_JAR_ARTIFACT }}
      VETS_SERVICE_PACKAGE_PATH: ${{ steps.set-var2.outputs.VETS_SERVICE_PACKAGE_PATH }}
      VETS_SERVICE_STAGING_DEPLOYMENT: ${{ steps.set-var.outputs.VETS_SERVICE_STAGING_DEPLOYMENT }}
      VETS_SERVICE_PRODUCTION_DEPLOYMENT: ${{ steps.set-var.outputs.VETS_SERVICE_PRODUCTION_DEPLOYMENT }}
      VETS_SVC_APP_IDENTITY_CLIENT_ID: ${{ steps.set-var.outputs.VETS_SVC_APP_IDENTITY_CLIENT_ID }}

    runs-on: ubuntu-latest
    # environment: production // https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
    # https://github.com/marketplace/actions/azure-login
    steps:

    - name: Azure Login
      uses: azure/login@v1.4.6 # https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
    # /!\ IMPORTANT:  The step that creates or updates the environment variable does not have access to the new value, but all subsequent steps in a job will have access.
    - name: Set Base environment variables
      id: set-var
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV

        GH_WORKSPACE=${{ github.workspace }} # "/github/workspace"

        VETS_SVC_APP_IDENTITY_CLIENT_ID=$(az identity show --name ${{ env.VETS_SVC_APP_ID_NAME }} -g ${{ env.RG_APP }} --query clientId -o tsv)

        echo  "VETS_SVC_APP_IDENTITY_CLIENT_ID=$VETS_SVC_APP_IDENTITY_CLIENT_ID" >> $GITHUB_ENV
        echo  "VETS_SVC_APP_IDENTITY_CLIENT_ID=$VETS_SVC_APP_IDENTITY_CLIENT_ID" >> $GITHUB_OUTPUT
        echo "VETS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR_ARTIFACT=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}-${{ env.DEPLOYMENT_VERSION }}.jar" >> $GITHUB_OUTPUT
        echo "VETS_SERVICE_STAGING_DEPLOYMENT=${{ env.STAGING_DEPLOYMENT_NAME }}-${{ env.VETS_SERVICE }}" >> $GITHUB_ENV
        echo "VETS_SERVICE_STAGING_DEPLOYMENT=${{ env.STAGING_DEPLOYMENT_NAME }}-${{ env.VETS_SERVICE }}" >> $GITHUB_OUTPUT
        echo "VETS_SERVICE_PRODUCTION_DEPLOYMENT=${{ env.PRODUCTION_DEPLOYMENT_NAME }}-${{ env.VETS_SERVICE }}" >> $GITHUB_ENV
        echo "VETS_SERVICE_PRODUCTION_DEPLOYMENT=${{ env.PRODUCTION_DEPLOYMENT_NAME }}-${{ env.VETS_SERVICE }}" >> $GITHUB_OUTPUT
 
      shell: bash

    # Variables in the env map cannot be defined in terms of other variables in the map
    - name: Set dependent environment variables
      id: set-var2
      run: |

        # ==== JARS ====: PWD already in /home/runner/work/azure-spring-cloud-petclinic-mic-srv >> $GITHUB_ENV
        echo "VETS_SERVICE_JAR=spring-petclinic-${{ env.VETS_SERVICE }}/target/$VETS_SERVICE_JAR_ARTIFACT" >> $GITHUB_ENV

        echo ""
        echo "GH_WORKSPACE Check ..."
        ls -al ${{ env.GH_WORKSPACE }}
        echo ""

        echo "VETS_SERVICE_PACKAGE_PATH=${{ github.workspace }}/${{ env.VETS_SERVICE }}/${{ env.VETS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_ENV
        echo "VETS_SERVICE_PACKAGE_PATH=${{ github.workspace }}/${{ env.VETS_SERVICE }}/${{ env.VETS_SERVICE_JAR_ARTIFACT }}" >> $GITHUB_OUTPUT

      shell: bash

    - name: Display environment variables
      run: |
        echo "Checking GITHUB_ENV"

        echo "LOCAL_IP=$LOCAL_IP"

        echo "VETS_SERVICE_JAR_ARTIFACT=$VETS_SERVICE_JAR_ARTIFACT"
        echo "VETS_SERVICE_JAR=$VETS_SERVICE_JAR"
        echo "VETS_SERVICE_STAGING_DEPLOYMENT=$VETS_SERVICE_STAGING_DEPLOYMENT"
        echo "VETS_SERVICE_PRODUCTION_DEPLOYMENT=$VETS_SERVICE_PRODUCTION_DEPLOYMENT"
        echo  "VETS_SVC_APP_IDENTITY_CLIENT_ID=$VETS_SVC_APP_IDENTITY_CLIENT_ID"

      shell: bash

    # Something to note, actions/checkout@v2 no longer sets the github workspace to the path input, which means you may need to manually set the working directory for your runs step
    # https://github.com/actions/checkout/blob/main/adrs/0153-checkout-v2.md#path
        
    - name: Checkout your repo
      uses: actions/checkout@v2
      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'microsoft'
        cache: maven
  
    - name: Build with Maven
      id: mvn_build
      run: | 
        mvn -B clean package --file pom.xml -DskipTests -Denv=cloud
        
        echo "github.workspace = ${{ github.workspace }}"
        pwd

        echo "****************************************************************************************"
        echo "*                                                                                      *"
        echo "*                                                                                      *"
        echo "*Checking Artifacts ...                                                                *"
        echo "*                                                                                      *"
        echo "*                                                                                      *"
        echo "****************************************************************************************"

        ls -al
        echo ""
        echo ""

        ls -al spring-petclinic-vets-service/target/*.jar

    - name: Archive VETS-SERVICE Jar artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.VETS_SERVICE }}
        path: ${{ github.workspace }}/${{ env.VETS_SERVICE_JAR }}
        retention-days: 5

    - name: Authorize local IP access to the Azure BLOB Storage 
      if: ${{ always() }}
      run: |
        echo "About to ADD network-rule to ALLOW $LOCAL_IP to Azure BLOB Storage ${{ env.AZ_STORAGE_NAME }}"
        az storage account network-rule add --ip-address $LOCAL_IP --account-name  ${{ env.AZ_STORAGE_NAME }}  --action "Allow" -g ${{ env.RG_APP }}  --only-show-errors
        sleep 30        
      shell: bash

    - name: Upload Artifacts to Azure BLOB Storage
      id: blob_upload
      run: | 
        # https://learn.microsoft.com/en-us/azure/storage/blobs/blob-cli

        # Runne rwill be blocked by network rules of storage account. Must Allow its IP
        # TODO in Bicep : RBAC ==> GH Runner SPN must have "Storage Blob Data Contributor" Role on the storage Account

        echo "About to upload Artifcats to Azure BLOB Storage. /!\ --overwrite' is in preview and under development"
        echo "AZ_BLOB_MAX_CONNECTIONS=${{ env.AZ_BLOB_MAX_CONNECTIONS }}"
        echo "AZ_BLOB_TIMEOUT=${{ env.AZ_BLOB_TIMEOUT }} "
        echo "AZ_BLOB_MAX_CONNECTIONS=${{ env.AZ_BLOB_MAX_CONNECTIONS }}"

        # https://learn.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations
        az storage blob upload --name ${{ env.VETS_SERVICE }} --file ${{ github.workspace }}/${{ env.VETS_SERVICE_JAR }} --container-name ${{ env.AZ_BLOB_CONTAINER_NAME }} --account-name ${{ env.AZ_STORAGE_NAME }} --auth-mode login --overwrite --max-connections ${{ env.AZ_BLOB_MAX_CONNECTIONS }} --timeout ${{ env.AZ_BLOB_TIMEOUT }}

    - name: Disable local IP access to the Azure BLOB Storage 
      if: ${{ always() }}
      run: |
        echo "About to REMOVE network-rule ALLOWING $LOCAL_IP to Azure BLOB Storage ${{ env.AZ_STORAGE_NAME }}"
        az storage account network-rule remove --ip-address $LOCAL_IP --account-name  ${{ env.AZ_STORAGE_NAME }} -g ${{ env.RG_APP }} --only-show-errors
      shell: bash

  deploy-apps:
    needs: [build]
    runs-on: ubuntu-latest # [self-hosted, linux, x64]
    steps: 

    - name: Azure Login
      uses: azure/login@v1.4.6 # https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout your repo
      uses: actions/checkout@v2
      
    # You can  download all artifacts in a workflow run by not specifying a name.
    - name: Download Jar artifacts
      uses: actions/download-artifact@v3

    - name: Check Artifacts
      run: | 
        echo "github.workspace = ${{ github.workspace }}"
        pwd
        ls -al

        echo ""
        echo "GH_WORKSPACE Check ..."
        ls -al ${{ env.GH_WORKSPACE }}
        echo ""

        echo "VETS_SERVICE_PACKAGE_PATH=${{ github.workspace }}/${{ env.VETS_SERVICE }}/${{ needs.build.outputs.VETS_SERVICE_JAR_ARTIFACT }}"

        echo "****************************************************************************************"
        echo "*                                                                                      *"
        echo "*                                                                                      *"
        echo "*Checking Artifacts ...                                                                *"
        echo "*                                                                                      *"
        echo "*                                                                                      *"
        echo "****************************************************************************************"

        echo "VETS_SERVICE_PACKAGE_PATH=${{ needs.build.outputs.VETS_SERVICE_PACKAGE_PATH }}"

        echo ""
        ls -al  ${{ env.VETS_SERVICE }}
        echo ""
        ls -al ${{ needs.build.outputs.VETS_SERVICE_PACKAGE_PATH }} # ${{ env.VETS_SERVICE_PACKAGE_PATH }}          
        echo ""

        echo ""
        echo "VETS_SERVICE_STAGING_DEPLOYMENT=${{ needs.build.outputs.VETS_SERVICE_STAGING_DEPLOYMENT }}"
        echo ""

        echo ""
        echo "VETS_SERVICE_PRODUCTION_DEPLOYMENT=${{ needs.build.outputs.VETS_SERVICE_PRODUCTION_DEPLOYMENT }}"
        echo ""

        echo ""
        echo "KV URI=${{ env.SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT }}"
        echo "TENANT=${{ env.SPRING_CLOUD_AZURE_TENANT_ID }}"
        echo ""

        VETS_SVC_APP_IDENTITY_CLIENT_ID=${{ needs.build.outputs.VETS_SVC_APP_IDENTITY_CLIENT_ID }}

        echo  "VETS_SVC_APP_IDENTITY_CLIENT_ID=$VETS_SVC_APP_IDENTITY_CLIENT_ID"
        echo  "VETS_SVC_APP_IDENTITY_CLIENT_ID=$VETS_SVC_APP_IDENTITY_CLIENT_ID"  >> $GITHUB_ENV

        # https://learn.microsoft.com/en-us/azure/spring-apps/concept-manage-monitor-app-spring-boot-actuator
        # https://learn.microsoft.com/en-us/azure/spring-apps/how-to-configure-health-probes-graceful-termination
        
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add --name spring
        az extension update --name spring

        echo "****************************************************************************************"
        echo "*                                                                                      *"
        echo "*                                                                                      *"
        echo "*About to deploy vets-service ...                                                      *"
        echo "*                                                                                      *"
        echo "*                                                                                      *"
        echo "****************************************************************************************"
        
        VETS_SERVICE_STARTUP_PROBE_CFG="spring-petclinic-${{ env.VETS_SERVICE }}/${{ env.DEPLOYMENT_STARTUP_PROBE_CFG }}"
        VETS_SERVICE_LIVENESS_PROBE_CFG="spring-petclinic-${{ env.VETS_SERVICE }}/${{ env.DEPLOYMENT_LIVENESS_PROBE_CFGXX }}"
        VETS_SERVICE_READINESS_PROBE_CFG="spring-petclinic-${{ env.VETS_SERVICE }}/${{ env.DEPLOYMENT_READINESS_PROBE_CFG }}"

        VISITS_SERVICE_STARTUP_PROBE_CFG="spring-petclinic-${{ env.VISITS_SERVICE }}/${{ env.DEPLOYMENT_STARTUP_PROBE_CFG }}"
        VISITS_SERVICE_LIVENESS_PROBE_CFG="spring-petclinic-${{ env.VISITS_SERVICE }}/${{ env.XXDEPLOYMENT_LIVENESS_PROBE_CFGX }}"
        VISITS_SERVICE_READINESS_PROBE_CFG="spring-petclinic-${{ env.VISITS_SERVICE }}/${{ env.DEPLOYMENT_READINESS_PROBE_CFG }}"
        
        CUSTOMERS_SERVICE_STARTUP_PROBE_CFG="spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/${{ env.DEPLOYMENT_STARTUP_PROBE_CFG }}"
        CUSTOMERS_SERVICE_LIVENESS_PROBE_CFG="spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/${{ env.DEPLOYMENT_LIVENESS_PROBE_CFG }}"
        CUSTOMERS_SERVICE_READINESS_PROBE_CFG="spring-petclinic-${{ env.CUSTOMERS_SERVICE }}/${{ env.DEPLOYMENT_READINESS_PROBE_CFG }}"
        
        API_GATEWAY_STARTUP_PROBE_CFG="spring-petclinic-${{ env.API_GATEWAY }}/${{ env.DEPLOYMENT_STARTUP_PROBE_CFG }}"
        API_GATEWAY_LIVENESS_PROBE_CFG="spring-petclinic-${{ env.API_GATEWAY }}/${{ env.DEPLOYMENT_LIVENESS_PROBE_CFG }}"
        API_GATEWAY_READINESS_PROBE_CFG="spring-petclinic-${{ env.API_GATEWAY }}/${{ env.DEPLOYMENT_READINESS_PROBE_CFG }}"
        
        if [ $DEPLOYMENT_STAGING ] && [ $DEPLOYMENT_ACTION == "deploy" ]
        then
          echo "Set deployment name to STAGING"
          DEPLOYMENT_NAME=${{ needs.build.outputs.VETS_SERVICE_STAGING_DEPLOYMENT }}
        else
          if [ !$DEPLOYMENT_STAGING ] && [ $DEPLOYMENT_ACTION == "set-production" ]
          then
              echo "Set deployment name to PRODUCTION"
              DEPLOYMENT_NAME=${{ needs.build.outputs.VETS_SERVICE_PRODUCTION_DEPLOYMENT }}
          else
              echo "ERROR Input param DEPLOYMENT_STAGING and DEPLOYMENT_ACTION are NOT consistent, choose [DEPLOYMENT_STAGING=true with DEPLOYMENT_ACTION=deploy for Staging] OR [DEPLOYMENT_STAGING=false with DEPLOYMENT_ACTION=set-production for Go Live]"
              exit 1
          fi
        fi
        echo "DEPLOYMENT_NAME="$DEPLOYMENT_NAME

        echo "Cheking if any deployment already exist ..."
        vets_deployment=$(az spring app deployment list --app  ${{ env.VETS_SERVICE }} --service ${{ env.AZURE_SPRING_APPS_SERVICE }} -g ${{ env.RG_APP }})

        if [[ $(echo $vets_deployment | jq -r 'length') -eq 0 ]]
        then
            echo "There is no existing deployment for vets-service"
            if [[ ${{ env.DEPLOYMENT_CREATE_NEW }} ]]
            then
              echo "About to create a new Deployment for vets-service"
              
              az spring app deployment create \
              --name $DEPLOYMENT_NAME \
              --app ${{ env.VETS_SERVICE }} \
              --service ${{ env.AZURE_SPRING_APPS_SERVICE }} -g ${{ env.RG_APP }} \
              --instance-count ${{ env.DEPLOYMENT_INSTANCE_COUNT }} \
              --cpu ${{ env.DEPLOYMENT_CPU }} \
              --memory ${{ env.DEPLOYMENT_MEMORY }} \
              --disable-probe ${{ env.DEPLOYMENT_DISABLE_PROBE }} \
              --enable-startup-probe ${{ env.DEPLOYMENT_ENABLE_STARTUP_PROBE }} \
              --enable-liveness-probe ${{ env.DEPLOYMENT_ENABLE_LIVENESS_PROBE }} \
              --enable-readiness-probe ${{ env.DEPLOYMENT_ENABLE_READINESS_PROBE }} \
              --startup-probe-config $VETS_SERVICE_STARTUP_PROBE_CFG \
              --liveness-probe-config $VETS_SERVICE_LIVENESS_PROBE_CFG \
              --readiness-probe-config $VETS_SERVICE_READINESS_PROBE_CFG \
              --termination-grace-period-seconds ${{ env.GRACE_PERIOD }} \
              --version ${{ env.DEPLOYMENT_VERSION }} \
              --runtime-version ${{ env.DEPLOYMENT_RUNTIME_VERSION }} \
              --skip-clone-settings
            else
              echo "ERROR Input param DEPLOYMENT_CREATE_NEW is set to false, no new Deployment will be created"
              exit 1
            fi
   
        else
            echo "There are existing deployment(s) for vets-service"
            for deployment in $(az spring app deployment list --app ${{ env.VETS_SERVICE }} --service ${{ env.AZURE_SPRING_APPS_SERVICE }} -g ${{ env.RG_APP }} | jq -r '.[].name')
            do
              echo "About to check Deployment " $deployment
              az spring app deployment show --name $deployment --app ${{ env.VETS_SERVICE }} --service ${{ env.AZURE_SPRING_APPS_SERVICE }} -g ${{ env.RG_APP }}
            done
        fi

        echo "In az spring app deploy , --deployment is the Name of an existing deployment of the app. Default to the production"

        if [ $DEPLOYMENT_STAGING ] && [ $DEPLOYMENT_ACTION == "deploy" ]
        then
            echo "About to deploy vets-service to a Staging environment"
            az spring app deploy \
            --name ${{ env.VETS_SERVICE }} \
            --service ${{ env.AZURE_SPRING_APPS_SERVICE }} -g ${{ env.RG_APP }} \
            --artifact-path ${{ needs.build.outputs.VETS_SERVICE_PACKAGE_PATH }} \
            --deployment ${{ steps.set-var.outputs.VETS_SERVICE_STAGING_DEPLOYMENT }} \
            --disable-probe ${{ env.DEPLOYMENT_DISABLE_PROBE }} \
            --enable-startup-probe ${{ env.DEPLOYMENT_ENABLE_STARTUP_PROBE }} \
            --enable-liveness-probe ${{ env.DEPLOYMENT_ENABLE_LIVENESS_PROBE }} \
            --enable-readiness-probe ${{ env.DEPLOYMENT_ENABLE_READINESS_PROBE }} \
            --startup-probe-config $VETS_SERVICE_STARTUP_PROBE_CFG \
            --liveness-probe-config $VETS_SERVICE_LIVENESS_PROBE_CFG \
            --readiness-probe-config $VETS_SERVICE_READINESS_PROBE_CFG \
            --termination-grace-period-seconds ${{ env.GRACE_PERIOD }} \
            --env "-SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT ${{ env.SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT }} -VETS_SVC_APP_IDENTITY_CLIENT_ID ${{ env.VETS_SVC_APP_IDENTITY_CLIENT_ID }} -SPRING_CLOUD_AZURE_TENANT_ID ${{ env.SPRING_CLOUD_AZURE_TENANT_ID }}" \
            --jvm-options ${{ env.DEPLOYMENT_JVM_OPTIONS }} \
            --version ${{ env.DEPLOYMENT_VERSION }} \
            --runtime-version ${{ env.DEPLOYMENT_RUNTIME_VERSION }} \            
        else
          if [ !$DEPLOYMENT_STAGING ] && [ $DEPLOYMENT_ACTION == "set-production" ]
          then
              echo "About to Set Production deployment of vets-service App ..."
              az spring app set-deployment -d ${{ steps.set-var.outputs.VETS_SERVICE_PRODUCTION_DEPLOYMENT }} -n ${{ env.VETS_SERVICE }} --service ${{ env.AZURE_SPRING_APPS_SERVICE }} -g ${{ env.RG_APP }}
          else
              echo "ERROR Input param DEPLOYMENT_STAGING and DEPLOYMENT_ACTION are NOT consistent, choose [DEPLOYMENT_STAGING=true with DEPLOYMENT_ACTION=deploy for Staging] OR [DEPLOYMENT_STAGING=false with DEPLOYMENT_ACTION=set-production for Go Live]"
              exit 1
          fi
        fi

        echo "About to assign endpoint to vets-service ... "
        az spring app update --name ${{ env.VETS_SERVICE }} --service ${{ env.AZURE_SPRING_APPS_SERVICE }} -g ${{ env.RG_APP }} --assign-endpoint true
      
    # security hardening for self-hosted agents: https://github.com/marketplace/actions/azure-login
    # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners
    # if the runner is self-hosted which is not github provided it is recommended to manually logout at the end of the workflow as shown below.
    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear
      shell: bash